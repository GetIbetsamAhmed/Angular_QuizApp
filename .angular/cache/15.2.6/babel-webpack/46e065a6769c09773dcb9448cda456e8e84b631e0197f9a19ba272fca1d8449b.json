{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://ec2-43-205-140-12.ap-south-1.compute.amazonaws.com:8000';\n    this.loggedIn = new BehaviorSubject(false);\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/x-www-form-urlencoded'\n      })\n    };\n    let accesstoken = localStorage.getItem('access_token');\n  }\n  login(username, password) {\n    const payload = {\n      grant_type: \"password\",\n      username: username,\n      password: password,\n      scope: \"\"\n    };\n    const body = new URLSearchParams();\n    for (const key in payload) {\n      body.set(key, payload[key]);\n    }\n    return this.http.post(`${this.baseUrl}/login`, body.toString(), this.httpOptions).pipe(tap(response => {\n      const token = response.access_token;\n      const role = response.role;\n      localStorage.setItem('access_token', token);\n      localStorage.setItem('role', role);\n      this.loggedIn.next(true);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('role');\n    this.loggedIn.next(false);\n  }\n  getToken() {\n    return localStorage.getItem('access_token') || '';\n  }\n  getRole() {\n    return localStorage.getItem('role') || '';\n  }\n  isLoggedIn() {\n    const token = this.getToken();\n    if (token) {\n      this.loggedIn.next(true);\n    } else {\n      this.loggedIn.next(false);\n    }\n    return this.loggedIn.asObservable();\n  }\n  changePassword(old_password, new_password, token) {\n    return this.http.put(environment.API_BASE_URL + 'update_password', {\n      old_password,\n      new_password,\n      token\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n  //forgot password \n  forgotPassword(email) {\n    return this.http.post(`${this.baseUrl}/forget-password`, {\n      email\n    });\n  }\n  resetPassword(reset_token, new_password) {\n    return this.http.post(`${this.baseUrl}/reset-password`, {\n      reset_token,\n      new_password\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","BehaviorSubject","tap","environment","AuthService","constructor","http","headers","accesstoken","localStorage","getItem","login","username","password","payload","grant_type","scope","body","URLSearchParams","key","set","post","baseUrl","toString","httpOptions","pipe","response","token","access_token","role","setItem","loggedIn","next","logout","removeItem","getToken","getRole","isLoggedIn","asObservable","changePassword","old_password","new_password","put","API_BASE_URL","Authorization","forgotPassword","email","resetPassword","reset_token","factory","providedIn"],"sourceRoot":"","sources":["/Applications/Angular/Upwork/Angular_QuizApp/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseUrl = 'http://ec2-43-205-140-12.ap-south-1.compute.amazonaws.com:8000';\n  private loggedIn = new BehaviorSubject<boolean>(false);\n  \n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    })\n  };\n  \n\n  constructor(private http: HttpClient) { \n    let accesstoken = localStorage.getItem('access_token')\n  }\n\n  login(username: string, password: string): Observable<any> {\n     const payload: { [key: string]: string } = {\n      grant_type: \"password\",\n      username: username,\n      password: password,\n      scope:\"\"\n    };\n    const body = new URLSearchParams();\n    for (const key in payload) {\n      body.set(key, payload[key]);\n    }\n    return this.http.post<any>(`${this.baseUrl}/login`, body.toString(), this.httpOptions)\n      .pipe(\n        tap(response => {\n          const token = response.access_token;\n          const role = response.role;\n          localStorage.setItem('access_token', token);\n          localStorage.setItem('role',role);\n          this.loggedIn.next(true);\n        })\n      );\n  }\n\n  logout(): void {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('role');\n    this.loggedIn.next(false);\n  }\n\n  getToken(): string {\n    return localStorage.getItem('access_token') || '';\n  }\n\n  getRole(): string {\n    return localStorage.getItem('role') || '';\n  }\n\n  isLoggedIn(): Observable<boolean> {\n    const token = this.getToken();\n    if (token) {\n      this.loggedIn.next(true);\n    } else {\n      this.loggedIn.next(false);\n    }\n    return this.loggedIn.asObservable();\n  }\n  changePassword(old_password: string, new_password: string, token: string) {\n    return this.http.put(environment.API_BASE_URL+'update_password', { old_password, new_password, token }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  //forgot password \n\n  forgotPassword(email: string): Observable<any> {\n    return this.http.post(`${this.baseUrl}/forget-password`, { email });\n  }\n\n  resetPassword(reset_token: string, new_password: string) {\n    return this.http.post(`${this.baseUrl}/reset-password`, { reset_token, new_password });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}