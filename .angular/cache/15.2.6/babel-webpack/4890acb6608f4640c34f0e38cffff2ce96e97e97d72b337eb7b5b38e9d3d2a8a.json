{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const roles = route.data['roles'];\n    if (roles.includes(this.authService.getRole())) {\n      return true;\n    } else {\n      return this.router.createUrlTree(['/']);\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,KAAK,GAAGF,KAAK,CAACG,IAAI,CAAC,OAAO,CAAa;IAE7C,IAAID,KAAK,CAACE,QAAQ,CAAC,IAAI,CAACP,WAAW,CAACQ,OAAO,EAAE,CAAC,EAAE;MAC9C,OAAO,IAAI;KACZ,MAAM;MACL,OAAO,IAAI,CAACP,MAAM,CAACQ,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC;;EAE3C;;AAXWX,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAY,SAATZ,SAAS;EAAAa,YAFR;AAAM","names":["AuthGuard","constructor","authService","router","canActivate","route","state","roles","data","includes","getRole","createUrlTree","factory","providedIn"],"sourceRoot":"","sources":["/Applications/Angular/Upwork/Angular_QuizApp/src/app/gaurds/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree {\n    const roles = route.data['roles'] as string[];\n\n    if (roles.includes(this.authService.getRole())) {\n      return true;\n    } else {\n      return this.router.createUrlTree(['/']);\n    }\n  }\n} \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}