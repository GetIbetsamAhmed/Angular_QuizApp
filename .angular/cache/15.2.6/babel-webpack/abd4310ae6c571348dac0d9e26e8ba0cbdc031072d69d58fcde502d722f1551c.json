{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/common\";\nexport class UpdatePasswordComponent {\n  constructor(router, route, authService, toastr, formBuilder) {\n    this.router = router;\n    this.route = route;\n    this.authService = authService;\n    this.toastr = toastr;\n    this.formBuilder = formBuilder;\n    this.showResult = false;\n    this.showPassword = false;\n  }\n  ngOnInit() {\n    this.resetToken = this.route.snapshot.params['token'];\n    this.formGroup = this.formBuilder.group({\n      newPassword: ['', [Validators.required]]\n    });\n  }\n  changePassword() {\n    this.new_password = this.formGroup.value.newPassword;\n    // this.adminService.put(url,this.changePasswordForm.value).subscribe(response=>{\n    //   console.log(response)\n    this.authService.resetPassword(this.resetToken, this.new_password).subscribe({\n      next: response => {\n        this.router.navigate(['/']);\n        this.toastr.success('success', 'Your New Password Updated Successfully!');\n      },\n      error: error => {\n        // Handle error\n      }\n    });\n    // })\n  }\n\n  onShowPasswordClick() {\n    this.showPassword = !this.showPassword;\n  }\n  onReset() {\n    this.formGroup.reset();\n  }\n}\nUpdatePasswordComponent.ɵfac = function UpdatePasswordComponent_Factory(t) {\n  return new (t || UpdatePasswordComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.ToastrService), i0.ɵɵdirectiveInject(i4.FormBuilder));\n};\nUpdatePasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdatePasswordComponent,\n  selectors: [[\"app-update-password\"]],\n  decls: 19,\n  vars: 3,\n  consts: [[1, \"auth-full-height\", \"d-flex\", \"flex-row\", \"align-items-center\"], [1, \"container\"], [1, \"row\", \"justify-content-center\"], [1, \"col-md-4\"], [1, \"card\"], [1, \"card-body\"], [1, \"text-center\", \"mt-3\"], [1, \"fw-bolder\"], [3, \"formGroup\", \"submit\"], [1, \"form-group\", \"mb-3\"], [\"formControlName\", \"resetToken\", \"type\", \"name\", \"required\", \"\", \"hidden\", \"\", 1, \"form-control\"], [1, \"form-group\", \"input-affix\", \"flex-column\", \"mb-3\"], [1, \"form-label\"], [\"formControlName\", \"newPassword\", \"minlength\", \"3\", \"type\", \"name\", \"required\", \"\", 1, \"form-control\", 3, \"type\"], [1, \"suffix-icon\", \"feather\", \"cursor-pointer\", \"text-dark\", 3, \"ngClass\", \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"w-100\"]],\n  template: function UpdatePasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"div\", 6)(7, \"h3\", 7);\n      i0.ɵɵtext(8, \"Change Password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"form\", 8);\n      i0.ɵɵlistener(\"submit\", function UpdatePasswordComponent_Template_form_submit_9_listener() {\n        return ctx.changePassword();\n      });\n      i0.ɵɵelementStart(10, \"div\", 9);\n      i0.ɵɵelement(11, \"input\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 11)(13, \"label\", 12);\n      i0.ɵɵtext(14, \"New Password \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"input\", 13);\n      i0.ɵɵelementStart(16, \"i\", 14);\n      i0.ɵɵlistener(\"click\", function UpdatePasswordComponent_Template_i_click_16_listener() {\n        return ctx.onShowPasswordClick();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"button\", 15);\n      i0.ɵɵtext(18, \"Submit\");\n      i0.ɵɵelementEnd()()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"type\", ctx.showPassword ? \"text\" : \"password\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", ctx.showPassword ? \"icon-eye-off\" : \"icon-eye\");\n    }\n  },\n  dependencies: [i5.NgClass, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.MinLengthValidator, i4.FormGroupDirective, i4.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;AAUnE,OAAM,MAAOC,uBAAuB;EAOlCC,YAAoBC,MAAc,EAAUC,KAAqB,EAAUC,WAAwB,EAASC,MAAqB,EAAUC,WAAwB;IAA/I,WAAM,GAANJ,MAAM;IAAkB,UAAK,GAALC,KAAK;IAA0B,gBAAW,GAAXC,WAAW;IAAsB,WAAM,GAANC,MAAM;IAAyB,gBAAW,GAAXC,WAAW;IALtJ,eAAU,GAAG,KAAK;IAClB,iBAAY,GAAG,KAAK;EAImJ;EAEvKC,QAAQ;IACN,IAAI,CAACC,UAAU,GAAG,IAAI,CAACL,KAAK,CAACM,QAAQ,CAACC,MAAM,CAAC,OAAO,CAAC;IACrD,IAAI,CAACC,SAAS,GAAG,IAAI,CAACL,WAAW,CAACM,KAAK,CAAC;MACtCC,WAAW,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACe,QAAQ,CAAC;KACxC,CAAC;EACJ;EACAC,cAAc;IACZ,IAAI,CAACC,YAAY,GAAG,IAAI,CAACL,SAAS,CAACM,KAAK,CAACJ,WAAW;IACpD;IACA;IACA,IAAI,CAACT,WAAW,CAACc,aAAa,CAAC,IAAI,CAACV,UAAU,EAAE,IAAI,CAACQ,YAAY,CAAC,CAACG,SAAS,CAAC;MAACC,IAAI,EAACC,QAAQ,IAAG;QAC5F,IAAI,CAACnB,MAAM,CAACoB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3B,IAAI,CAACjB,MAAM,CAACkB,OAAO,CAAC,SAAS,EAAE,yCAAyC,CAAC;MACvE,CAAC;MACDC,KAAK,EAACA,KAAK,IAAG;QACZ;MAAA;IACD,CAAC,CACH;IACL;EACF;;EACEC,mBAAmB;IACjB,IAAI,CAACC,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACxC;EAEAC,OAAO;IACL,IAAI,CAAChB,SAAS,CAACiB,KAAK,EAAE;EACxB;;AAnCW5B,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;QAAvBA,uBAAuB;EAAA6B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCXpCC,8BAAiE;MAOXA,+BAAe;MAAAA,iBAAK;MAE9CA,+BAA0D;MAA5BA;QAAA,OAAUC,oBAAgB;MAAA,EAAC;MACrDD,+BAA6B;MACzBA,6BAAsF;MAC1FA,iBAAM;MACNA,gCAAqD;MACvBA,8BAAa;MAAAA,iBAAQ;MAC/CA,6BAA0I;MAC1IA,8BACwF;MAAhCA;QAAA,OAASC,yBAAqB;MAAA,EAAC;MAC3FD,iBAAI;MAEJA,mCAAoD;MAAAA,uBAAM;MAAAA,iBAAS;;;MAXjEA,eAAuB;MAAvBA,yCAAuB;MAMgBA,eAA2C;MAA3CA,6DAA2C;MAEhFA,eAAsD;MAAtDA,wEAAsD","names":["Validators","UpdatePasswordComponent","constructor","router","route","authService","toastr","formBuilder","ngOnInit","resetToken","snapshot","params","formGroup","group","newPassword","required","changePassword","new_password","value","resetPassword","subscribe","next","response","navigate","success","error","onShowPasswordClick","showPassword","onReset","reset","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Applications/Angular/Upwork/Angular_QuizApp/src/app/users/update-password/update-password.component.ts","/Applications/Angular/Upwork/Angular_QuizApp/src/app/users/update-password/update-password.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-update-password',\n  templateUrl: './update-password.component.html',\n  styleUrls: ['./update-password.component.css']\n})\nexport class UpdatePasswordComponent implements OnInit{\n  formGroup: FormGroup;\n  showResult = false;\n  showPassword = false;\n  resetToken: string;\n  new_password: string;\n  \n  constructor(private router: Router, private route: ActivatedRoute, private authService: AuthService,private toastr: ToastrService, private formBuilder: FormBuilder) { }\n\n  ngOnInit() {\n    this.resetToken = this.route.snapshot.params['token'];\n    this.formGroup = this.formBuilder.group({\n      newPassword: ['', [Validators.required]]\n    });\n  }\n  changePassword(){\n    this.new_password = this.formGroup.value.newPassword; \n    // this.adminService.put(url,this.changePasswordForm.value).subscribe(response=>{\n    //   console.log(response)\n    this.authService.resetPassword(this.resetToken, this.new_password).subscribe({next:response => {\n      this.router.navigate(['/']);\n      this.toastr.success('success', 'Your New Password Updated Successfully!');\n        },\n        error:error => {\n          // Handle error\n        }}\n      );\n  // })\n}\n  onShowPasswordClick() {\n    this.showPassword = !this.showPassword\n  }\n\n  onReset() {\n    this.formGroup.reset();\n  }\n\n}\n","<div class=\"auth-full-height d-flex flex-row align-items-center\">\n    <div class=\"container\">\n        <div class=\"row justify-content-center\">\n            <div class=\"col-md-4\">\n                <div class=\"card\">\n                    <div class=\"card-body\"> \n                            <div class=\"text-center mt-3\">\n                                <h3 class=\"fw-bolder\">Change Password</h3>\n                            </div>\n                            <form [formGroup]=\"formGroup\" (submit)=\"changePassword()\">\n                                <div class=\"form-group mb-3\">\n                                    <input formControlName=\"resetToken\" class=\"form-control\" type=\"name\" required hidden/>\n                                </div>\n                                <div class=\"form-group input-affix flex-column mb-3\">\n                                    <label class=\"form-label\">New Password </label>\n                                    <input formControlName=\"newPassword\" [type]=\"showPassword ? 'text' : 'password'\" class=\"form-control\" minlength=\"3\" type=\"name\" required/>\n                                    <i class=\"suffix-icon feather cursor-pointer text-dark\" \n                                    [ngClass]=\"showPassword ? 'icon-eye-off' : 'icon-eye'\"  (click)=\"onShowPasswordClick()\">\n                                </i>\n                                </div>\n                                <button type=\"submit\" class=\"btn btn-primary w-100\">Submit</button> \n                            </form>  \n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}