{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { responseMessage } from \"../constants/response.constant\";\nimport { tap } from \"rxjs/internal/operators/tap\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiHandlerService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  Get(url, params) {\n    return this.httpClient.get(url, {\n      params: this.createParams(params)\n    }).pipe(tap(x => this.HandleResponse(x)));\n  }\n  GetAll(url, params) {\n    return this.httpClient.get(url, {\n      params: this.createParams(params)\n    }).pipe(tap(x => this.HandleResponse(x)));\n  }\n  Post(url, data, params) {\n    return this.httpClient.post(url, data, {\n      params: this.createParams(params)\n    }).pipe(tap(x => this.HandleResponse(x)));\n  }\n  Delete(url, data, params) {\n    return this.httpClient.delete(url, {\n      params: this.createParams(params)\n    }).pipe(tap(x => this.HandleResponse(x)));\n  }\n  Put(url, data, params) {\n    return this.httpClient.put(url, data, {\n      params: this.createParams(params)\n    }).pipe(tap(x => this.HandleResponse(x)));\n  }\n  HandleResponse(response) {\n    if (response.Status === 500) {\n      alert(responseMessage.serverError);\n    }\n  }\n  createParams(params) {\n    let httpParams = new HttpParams();\n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        httpParams = httpParams.append(key, value);\n      });\n    }\n    return httpParams;\n  }\n}\nApiHandlerService.ɵfac = function ApiHandlerService_Factory(t) {\n  return new (t || ApiHandlerService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiHandlerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiHandlerService,\n  factory: ApiHandlerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,sBAAsB;AAC7D,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,GAAG,QAAQ,6BAA6B;;;AAKjD,OAAM,MAAOC,iBAAiB;EAC5BC,YAAmBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EAC7B;EAEAC,GAAG,CAACC,GAAW,EAAEC,MAAmB;IAClC,OAAO,IAAI,CAACH,UAAU,CACnBI,GAAG,CAACF,GAAG,EAAE;MAACC,MAAM,EAAE,IAAI,CAACE,YAAY,CAACF,MAAM;IAAC,CAAC,CAAC,CAC7CG,IAAI,CAACT,GAAG,CAAEU,CAAC,IAAK,IAAI,CAACC,cAAc,CAACD,CAAC,CAAC,CAAC,CAAC;EAC7C;EAGAE,MAAM,CAACP,GAAW,EAAEC,MAAmB;IACrC,OAAO,IAAI,CAACH,UAAU,CACnBI,GAAG,CAACF,GAAG,EAAE;MAACC,MAAM,EAAE,IAAI,CAACE,YAAY,CAACF,MAAM;IAAC,CAAC,CAAC,CAC7CG,IAAI,CAACT,GAAG,CAAEU,CAAC,IAAK,IAAI,CAACC,cAAc,CAACD,CAAC,CAAC,CAAC,CAAC;EAC7C;EAEAG,IAAI,CAACR,GAAW,EAAES,IAAS,EAAER,MAAmB;IAC9C,OAAO,IAAI,CAACH,UAAU,CACnBY,IAAI,CAACV,GAAG,EAAES,IAAI,EAAE;MAACR,MAAM,EAAE,IAAI,CAACE,YAAY,CAACF,MAAM;IAAC,CAAC,CAAC,CACpDG,IAAI,CAACT,GAAG,CAAEU,CAAC,IAAK,IAAI,CAACC,cAAc,CAACD,CAAC,CAAC,CAAC,CAAC;EAC7C;EAEAM,MAAM,CAACX,GAAW,EAAES,IAAQ,EAAER,MAAmB;IAC/C,OAAO,IAAI,CAACH,UAAU,CACnBc,MAAM,CAACZ,GAAG,EAAE;MAACC,MAAM,EAAE,IAAI,CAACE,YAAY,CAACF,MAAM;IAAC,CAAC,CAAC,CAChDG,IAAI,CAACT,GAAG,CAAEU,CAAC,IAAK,IAAI,CAACC,cAAc,CAACD,CAAC,CAAC,CAAC,CAAC;EAC7C;EAEAQ,GAAG,CAACb,GAAW,EAAES,IAAS,EAAER,MAAmB;IAC7C,OAAO,IAAI,CAACH,UAAU,CACnBgB,GAAG,CAACd,GAAG,EAAES,IAAI,EAAE;MAACR,MAAM,EAAE,IAAI,CAACE,YAAY,CAACF,MAAM;IAAC,CAAC,CAAC,CACnDG,IAAI,CAACT,GAAG,CAAEU,CAAC,IAAK,IAAI,CAACC,cAAc,CAACD,CAAC,CAAC,CAAC,CAAC;EAC7C;EAEAC,cAAc,CAACS,QAAa;IAC1B,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAC3BC,KAAK,CAACvB,eAAe,CAACwB,WAAW,CAAC;;EAEtC;EAEAf,YAAY,CAACF,MAAmB;IAC9B,IAAIkB,UAAU,GAAG,IAAI1B,UAAU,EAAE;IACjC,IAAIQ,MAAM,EAAE;MACVmB,MAAM,CAACC,OAAO,CAACpB,MAAM,CAAC,CAACqB,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAI;QAC9CL,UAAU,GAAGA,UAAU,CAACM,MAAM,CAACF,GAAG,EAAEC,KAAK,CAAC;MAC5C,CAAC,CAAC;;IAEJ,OAAOL,UAAU;EACnB;;AAjDWvB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAA8B,SAAjB9B,iBAAiB;EAAA+B,YAFhB;AAAM","names":["HttpParams","responseMessage","tap","ApiHandlerService","constructor","httpClient","Get","url","params","get","createParams","pipe","x","HandleResponse","GetAll","Post","data","post","Delete","delete","Put","put","response","Status","alert","serverError","httpParams","Object","entries","forEach","key","value","append","factory","providedIn"],"sourceRoot":"","sources":["/Applications/Angular/Upwork/Angular_QuizApp/src/app/services/api-handler.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { IApiBaseActions, ParamsType } from \"../interfaces/api-base-actions.interface\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { responseMessage } from \"../constants/response.constant\";\nimport { tap } from \"rxjs/internal/operators/tap\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiHandlerService implements IApiBaseActions {\n  constructor(public httpClient: HttpClient) {\n  }\n\n  Get(url: string, params?: ParamsType) {\n    return this.httpClient\n      .get(url, {params: this.createParams(params)})\n      .pipe(tap((x) => this.HandleResponse(x)));\n  }\n\n\n  GetAll(url: string, params?: ParamsType) {\n    return this.httpClient\n      .get(url, {params: this.createParams(params)})\n      .pipe(tap((x) => this.HandleResponse(x)));\n  }\n\n  Post(url: string, data: any, params?: ParamsType) {\n    return this.httpClient\n      .post(url, data, {params: this.createParams(params)})\n      .pipe(tap((x) => this.HandleResponse(x)));\n  }\n\n  Delete(url: string, data:any, params?: ParamsType) {\n    return this.httpClient\n      .delete(url, {params: this.createParams(params)})\n      .pipe(tap((x) => this.HandleResponse(x)));\n  }\n\n  Put(url: string, data: any, params?: ParamsType) {\n    return this.httpClient\n      .put(url, data, {params: this.createParams(params)})\n      .pipe(tap((x) => this.HandleResponse(x)));\n  }\n\n  HandleResponse(response: any) {\n    if (response.Status === 500) {\n      alert(responseMessage.serverError);\n    }\n  }\n\n  createParams(params?: ParamsType) {\n    let httpParams = new HttpParams();\n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        httpParams = httpParams.append(key, value);\n      });\n    }\n    return httpParams;\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}